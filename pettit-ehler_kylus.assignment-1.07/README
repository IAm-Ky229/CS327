*The wild_pokemon_battle class encapsulates most of what I worked on for this assignment

*The following directories need to be passed in for the program to not seg fault:
	- share/cs327/moves.csv
	- share/cs327/pokemon.csv
	- share/cs327/pokemon_moves.csv
	- share/cs327/pokemon_stats.csv
	
(Execute should look like: ./battle share/cs327/moves.csv share/cs327/pokemon.csv share/cs327/pokemon_moves.csv share/cs327/pokemon_stats.csv)

-----> file_parsing.h <-----

file_reader: New method to read in pokemon_stats. Also refactored class methods as a whole to take in vectors related to the data they are parsing in. So we can update a vector back in our main, making the data available when we need it
	
pokemon_stats: New class to parse in stat mappings for all pokemon
	- pokemon_id
	- stat_id
	- base_stat
	- effort

-----> file_parsing.cpp <-----

read_in_file: accomodates for parsing pokemon_stats now

read_lines_pokemon_stats: parses in entire csv file of style pokemon_stats

-----> world_generation.h <-----

in_game_pokemon: New class to generate a pokemon in_game seperate from the data we have parsed in. Has fields for
	- id
	- level
	- HP
	- attack
	- defense
	- special attack
	- special defense
	- speed
	- evasion
	- HP IV
	- attack IV
	- defense IV
	- special attack IV
	- special defense IV
	- speed IV
	- move 1
	- move 2
	- move 1 ID
	- move 2 ID
	- pokemon name
	- shiny status
	- gender

Also has getters and setters for every private field, as I made this class proper

wild_pokemon_battle: New class to handle wild pokemon battle logic. Consists of public methods:
	- determine_battle()
	
	- engage_battle_wild(std::vector<pokemon> pkmn_list, std::vector<pokemon_stats> pkmn_st, std::vector<pokemon_moves> pkmn_mv, std::vector<moves> mv, int manhattan_x, int manhattan_y)
	
	- generate_pokemon(std::vector<pokemon> pkmn_list, std::vector<pokemon_stats> pkmn_st, std::vector<pokemon_moves> pkmn_mv, std::vector<moves> mv, int manhattan_x, int manhattan_y)
	
	- get_pokemon_stats(in_game_pokemon &pkmn, std::vector<pokemon_stats> pkmn_st)
	
	- get_pokemon_moves(in_game_pokemon &pkmn, std::vector<pokemon_moves> pkmn_mv)
	
	- resolve_pokemon_move_names(in_game_pokemon &pkmn, std::vector<moves> mv)
	
	- choose_random_pokemon(in_game_pokemon &pkmn, std::vector<pokemon> pkmn_list)
	
	- assign_ivs(in_game_pokemon &pkmn)
	
	- generate_HP_lv_up(int base_HP, int HP_iv, int level)
	
	- generate_otherstat_lv_up(int base_stat, int base_iv, int level)
	
	- level_up(in_game_pokemon &pkmn, int manhattan_x, int manhattan_y)

-----> world_generation.cpp <-----

main: Create 6 different vectors, one for each class:
	- experience
	- moves
	- pokemon
	- pokemon_moves
	- pokemon_species
	- type_names
	- pokemon_stats
	
Pass in the vectors to our file reader class method so they are updated as needed

move_PC: Refactored to take in the list of pokemon, pokemon stats, moves, and pokemon moveset mappings, in addition to the current manhattan_x and manhattan_y. If we move onto tall grass, check to see if we should start a wild battle. If so, call engage_battle_wild and pass in the needed data.

determine_battle: 10% of the time, returns 1

engage_battle_wild: Generates a pokemon, clears the screen. Prints out pokemon name, stats, moves, gender, and shiny status. Waits for two presses on ESC to exit back to the game

generate_pokemon: Takes the list of all pokemon, the list of all pokemon stats, the list of all pokemon moves, and list of all pokemon movesets, and the currently generated map's manhattan X and Y from (0,0). Chooses a random pokemon, gets the base stats for that pokemon, assigns IVs, levels up based on base stats / IVs, gets two moves for that poekmon, and resolves the names of the moves. Lastly, determines if pokemon is shiny, and the gender. Returns the generated pokemon to the calling function.

choose_random_pokemon: Chooses one pokemon from the list of pokemon parsed in. Randomly selects an ID and resolves the identifier for that pokemon ID.

get_pokemon_stats: Gets the base HP, attack, defense, special attack, special defense, and speed of a pokemon from the stats list. Given the pokemon passed in has an ID.

get_pokemon_moves:  Attempts to select two moves from the chosen pokemon's movepool in the pokemon_moves list. Start at movepool ID 15, and iterate up to 20. It is very likely we will find at least one movepool within the ID range 15 - 20, most if not all pokemon have at least one in that range. Also be sure we are only selecting from learned moves, not TMs, HMs, etc.

assign_ivs: Assign a random number 0-15 to each of the HP, attack, defense, special attack, special defense, and speed ivs.

generate_HP_lv_up: Calculate what the pokemon's HP should be, based on level and HP IV.

generate_otherstat_lv_up: Calculate what a stat other than HP should be, based on level and IV.

level_up: Generate a level for the pokemon, given a manhattan_x and manhattan_y distance from (0,0). Assign base stats for HP, attack, defense, special attack, special defense, and speed.

resolve_pokemon_move_names: Using the IDs of the moves for this pokemon, resolve the moves by name, using the list of moves we parsed in
