* I'm waiting to see how I'm supposed to re-factor my code into multiple files, becasue I keep getting linker errors when I try to do it, and don't want to waste time trying to figure out what's wrong when I need to get the assignment functionality working. Putting stuff into multiple files should be easy enough once I see how Jeremy does it in the solutions. The file will be a bit long, most of the new additions are near the bottom. And I tried to document all the changes.

*A strange bug I'm getting is that occasionally, hikers and hivals don't move. This is increasingly becoming a problem, but I don't know what's causing it. When they move, everything works as I intend it to.

*Another important thing is, you need to press ESC twice to exit the menu and the pokemon battle. I didn't implement it with raw, I'm checking a series of keypresses.

main: Functionality changes mainly had to do with ncurses. Now that I have a controller, I can combine the character movement loop and map generation logic I had to create an actual game you can move around in. My logic in main is to:

	- Get user input
	- Move any characters as needed
	- Check user input to see if anything needs to happen
		- Check to see if we should bring up pokecenter/pokemart placeholder
			- If we are standing on a center or mart, bring up placeholder until we want to exit
		- Check PC movement
		- Check to see if list gets pulled up
			- Make deep copy of heap so we can pull stuff out
			- Update it depending on which "window" we're looking at
			- Check to see if ESC, UP, or DOWN are pressed
		- Check to see if we should quit game
	- Check to see if we should move to a different map (up, down, right, left)
		- Keep track of which exit we used
		- Check to see if we need to generate a new map
			- If yes, do so
			- Otherwise, print existing map
			
generate_map: Updated to place a player character

determine_cost_PC: New determine cost function for the player character

place_characters: Updated so that the stationary will be added to the heap with an incredibly high cost, probably never reached. So that when we print characters in the list, stationaries are printed too

*NOTE: Updating the functions so that a character can move onto the PC was basically just adding some if statements at the end, to see if we actually were about to move onto the PC

move_pacer: Updated so that a pacer moving onto the PC will start a battle

move_up: Updated so that a pacer can move onto the PC

move_down: Updated so that a pacer can move onto the PC

move_left: Updated so that a pacer can move onto the PC

move_right: Updated so that a pacer can move onto the PC

move_via_shortest_path: Updated so that once a hiker/rival fights the PC, they stop pathing

*In my implementation, wanderers can't "turn" on the PC, they can only walk forward onto the PC

move_wanderer: Updated so that a wanderer moving onto the PC will start a battle

move_up_random: Updated so that a wanderer can move onto the PC

move_dowm_random: Updated so that a wanderer can move onto the PC

move_right_random: Updated so that a wanderer can move onto the PC

move_left_random: Updated so that a wanderer can move onto the PC

move_random_walker: Updated so that a random walker moving onto the PC will start a battle

move_left_walker: Updated so that a random walker can move onto the PC

move_right_walker: Updated so that a random walker can move onto the PC

move_up_walker: Updated so that a random walker can move onto the PC

move_down_walker: Updated so that a random walker can move onto the PC

attempt_move_PC: Attempt to move the PC to a new location, based on the keypress. If we can move, update the PC_added_to_heap variable so we can't put the PC into the heap until it is removed.

move_PC: Actually move the PC once we extract it from the heap. If the PC moves to a location occupied by a character that has not yet battled, go to the battle placeholder.

update_list: Used to update the list that is brought up by a 't' keystroke. Determine the number of pages and number of entries on the alst page. Then, print out the corresponding characters depending on which window we're in. A list of characters is generated by using a deep copy of the heap. Up to 10 characters are displayed at once.

engage_battle: Placeholder for a pokemon battle. Waits until ESC is pressed to exit.

print_map: Uses mv_addch now instead of just printing. I didn't get to implementing color unfortunately, probably will in the future though because it doesn't seem too intensive.
